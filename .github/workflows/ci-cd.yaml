name: CI-CD
on:
  push:
    branches: [ "main", "develop", "releases/**", "hotfix/**" ]
  pull_request:
    types: [ opened, synchronize, reopened ]
  workflow_dispatch:


permissions:
  id-token: write
  contents: read
  issues: write
  pull-requests: write

jobs:
  cloudrun:
    name: CI-CD
    runs-on: ubuntu-latest
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: gradle

      - name: Install Dependencies
        run: ./gradlew build --no-daemon

      - name: Run Coverage
        run: |
          chmod +x gradlew
          ./gradlew jacocoTestReport
        if: github.event_name != 'workflow_dispatch'

      - name: Upload Report
        uses: actions/upload-artifact@v4
        with:
          name: report.xml
          path: ${{ github.workspace }}/build/reports/jacoco/test/jacocoTestReport.xml
        if: github.event_name != 'workflow_dispatch'

      - name: Add coverage to PR
        id: jacoco
        uses: madrapps/jacoco-report@v1.7.1
        with:
          paths: |
            ${{ github.workspace }}/build/reports/jacoco/test/jacocoTestReport.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 80
          min-coverage-changed-files: 60
        if: github.event_name != 'workflow_dispatch'

      - name: Fail PR if overall coverage is less than 80%
        if: ${{ github.event_name == 'pull_requests' && steps.jacoco.outputs.coverage-overall < 80.0 }}
        uses: actions/github-script@v6
        with:
          script: |
            core.setFailed('Overall coverage is less than 80%!')

      - name: Authenticate with GCP
        uses: google-github-actions/auth@v2
        with:
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_FEDERATION }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: '>= 363.0.0'

      - name: Install beta components
        run: |
          gcloud components install beta --quiet

      - name: Docker Auth
        run: |-
          gcloud auth configure-docker ${{ secrets.PROJECT_REGION }}-docker.pkg.dev --quiet

      - name: Build Image
        run: |
          docker build . --file Dockerfile --tag ${{ secrets.PROJECT_REGION }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/${{ secrets.REPOSITORY_NAME }}/${{ secrets.GCP_IMAGE_NAME }}

      - name: Push Image
        run: docker push ${{ secrets.PROJECT_REGION }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/${{ secrets.REPOSITORY_NAME }}/${{ secrets.GCP_IMAGE_NAME }}

      - name: Deploy Cloud Run Job
        run: |
          JOB_EXISTS=$(gcloud beta run jobs describe ${{ secrets.JOB_NAME }} --project ${{ secrets.PROJECT_ID }} --region ${{ secrets.PROJECT_REGION }} --format="value(name)" || echo "not found")    
          if [ "$JOB_EXISTS" != "not found" ]; then
            echo "Job already exists, updating..."
            gcloud beta run jobs update ${{ secrets.JOB_NAME }} \
            --image asia-south1-docker.pkg.dev/architect-learning-435310/recommendations-engine/recommendations-pre-processor-job \
            --project ${{ secrets.PROJECT_ID }} \
            --task-timeout 240m \
            --region ${{ secrets.PROJECT_REGION }} \
            --set-env-vars "DB_URL=${{ secrets.POSTGRES_DB_URL }},DB_USERNAME=${{ secrets.POSTGRES_DB_USERNAME }},DB_PASSWORD=${{ secrets.POSTGRES_DB_PASSWORD }},OUTPUT_PATH=${{ secrets.OUTPUT_PATH }}" \
            --args="${{ secrets.GCP_STORAGE_BUCKET_INPUT_PATH }}","${{ secrets.GCP_STORAGE_BUCKET_NAME }}"
          else
            echo "Job does not exist, creating a new job..."
            gcloud beta run jobs create ${{ secrets.JOB_NAME }} \
            --image asia-south1-docker.pkg.dev/architect-learning-435310/recommendations-engine/recommendations-pre-processor-job \
            --project ${{ secrets.PROJECT_ID }} \
            --task-timeout 240m \
            --region ${{ secrets.PROJECT_REGION }} \
            --set-env-vars "DB_URL=${{ secrets.POSTGRES_DB_URL }},DB_USERNAME=${{ secrets.POSTGRES_DB_USERNAME }},DB_PASSWORD=${{ secrets.POSTGRES_DB_PASSWORD }},OUTPUT_PATH=${{ secrets.OUTPUT_PATH }}" \
            --args="${{ secrets.GCP_STORAGE_BUCKET_INPUT_PATH }}","${{ secrets.GCP_STORAGE_BUCKET_NAME }}"
          fi

      - name: Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: workflow,job,commit,repo,ref,author,took
          custom_payload: |
            {
              attachments: [{
                color: '${{ job.status }}' === 'success' ? 'good' : '${{ job.status }}' === 'failure' ? 'danger' : 'warning',
                text: `Action Name: ${process.env.AS_WORKFLOW}\n Repository Name:${process.env.AS_REPO}@${process.env.AS_REF} by ${process.env.AS_AUTHOR} ${{ job.status }} in ${process.env.AS_TOOK}`,
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()